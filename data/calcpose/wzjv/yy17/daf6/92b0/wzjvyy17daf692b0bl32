{"data":{"python":"def getLandmarks(imgRGB):\n    NUM_FACE = 1\n    mpFaceMesh = mp.solutions.face_mesh\n    faceMesh = mpFaceMesh.FaceMesh(max_num_faces=NUM_FACE)\n    results = faceMesh.process(imgRGB)\n    faceMesh.close()\n    data = {}\n    if results.multi_face_landmarks:\n        for faceLms in results.multi_face_landmarks:\n            for id, lm in enumerate(faceLms.landmark):\n                data['X_' + str(id)] = lm.x * 1000\n                data['Y_' + str(id)] = lm.y * 1000\n                data['Z_' + str(id)] = lm.z * 1000\n        return data\n    else:\n        return None\n\nimg = imgurl[imgurl.index(',')+1:]\n#img = base64.b64decode(img)\n#img = numpy.frombuffer(img, dtype=numpy.uint8)\n#img = cv2.imdecode(img, -1)\n#img = getLandmarks(img)\n\nimg = img.encode();\nimg = bytearray(img);\n\njsc = JsonCall()\njsc.setFunction(\"setTarget\")\njsc.setParam(\"data\", img)\nd = jsc.send().data\n\nimg = base64.b64decode(d['data'])\nimg = numpy.frombuffer(img, dtype=numpy.uint8)\nimg = img.reshape(d['shape'])\n\ncnt = cv2.imencode('.png', img)[1]\nb64 = base64.b64encode(cnt).decode('ascii')\nurl = \"data:image/png;base64,\" + b64\n\nreturn url","import":"import sys\nimport json\nfrom mhrc.JsonCall import JsonCall\nimport numpy\nimport cv2\nimport base64\nimport mediapipe as mp\nimport urllib.parse\n\n","returntype":"JSONObject","type":"python","params":[{"name":"imgurl","type":"String"}],"desc":""},"id":"wzjvyy17daf692b0bl32","sessionid":"jvgvwg16b7a4d277bt3","time":1639761576014,"addr":"/0:0:0:0:0:0:0:1:43506","username":"admin"}